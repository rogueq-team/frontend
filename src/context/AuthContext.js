import React, { createContext, useContext, useState } from 'react';

const AuthContext = createContext();

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);
  const [isLoading, setIsLoading] = useState(false);

  // –§—É–Ω–∫—Ü–∏—è "–≤—Ö–æ–¥–∞" —Å mock –¥–∞–Ω–Ω—ã–º–∏
  const login = async (email, password, userType) => {
    setIsLoading(true);

    // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ API
    await new Promise(resolve => setTimeout(resolve, 1000));

    // Mock –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const mockUser = {
      id: 1,
      name: userType === 'advertiser' ? '–ö–æ–º–ø–∞–Ω–∏—è "–†–æ–≥–∞ –∏ –∫–æ–ø—ã—Ç–∞"' : '–ò–≤–∞–Ω –ë–ª–æ–≥–µ—Ä',
      email: email,
      userType: userType,
      avatar: userType === 'advertiser' ? 'üè¢' : 'üé¨',
      registrationDate: '2024-01-15',
      balance: userType === 'advertiser' ? 50000 : 15000,
      campaigns: userType === 'advertiser' ? 5 : 3,
      statistics: {
        views: 12500,
        clicks: 345,
        conversions: 28,
        engagement: 4.2
      }
    };

    setUser(mockUser);
    setIsLoading(false);
    return { success: true, user: mockUser };
  };

  // –§—É–Ω–∫—Ü–∏—è "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"
  const register = async (userData) => {
    setIsLoading(true);
    await new Promise(resolve => setTimeout(resolve, 1500));

    const newUser = {
      id: Date.now(),
      ...userData,
      avatar: userData.userType === 'advertiser' ? 'üè¢' : 'üé¨',
      registrationDate: new Date().toISOString().split('T')[0],
      balance: 0,
      campaigns: 0,
      statistics: {
        views: 0,
        clicks: 0,
        conversions: 0,
        engagement: 0
      }
    };

    setUser(newUser);
    setIsLoading(false);
    return { success: true, user: newUser };
  };

  // –§—É–Ω–∫—Ü–∏—è –≤—ã—Ö–æ–¥–∞
  const logout = () => {
    setUser(null);
  };

  const value = {
    user,
    isLoading, // —Ç–∏–º—É—Ä—á–∏–∫: —á—Ç–æ isloading. –ø–µ—Ä–µ–¥–µ–ª–∞—Ç—å –Ω–∞ react-query
    login,
    register,
    logout,
    isAuthenticated: !!user
  };

  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  );
};